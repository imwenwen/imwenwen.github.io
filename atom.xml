<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>imwenwenBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-02T17:24:20.269Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>imwenwen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端知识点整合</title>
    <link href="http://example.com/2021/02/03/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2021/02/03/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-02-02T17:00:00.000Z</published>
    <updated>2021-02-02T17:24:20.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端知识点"><a href="#前端知识点" class="headerlink" title="前端知识点"></a>前端知识点</h1><h2 id="Es6"><a href="#Es6" class="headerlink" title="Es6"></a>Es6</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><pre><code class="java">&lt;script&gt;        {          var a=20;        let b=10;    }console.log(a);console.log(b);&lt;/script&gt;----------------------------&lt;script&gt;   var a=1;   var a=2;   let m=10;   let m=20; //Uncaught SyntaxError: Identifier 'm' has already been declared   console.log(a);   console.log(b);&lt;/script&gt;</code></pre><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><pre><code class="java">&lt;script&gt;    const PI="3.1415";    PI=3.14;    //const.html:4 Uncaught SyntaxError: Missing initializer in const declaration    const a;    console.log(PI);&lt;/script&gt;</code></pre><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><pre><code class="java">&lt;script&gt;    let a=1,b=2,c=3;    console.log(a,b,c);    //es6    let [x,y,z]=[10,20,30];    console.log() console.log(x,y,z);&lt;/script&gt;</code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><pre><code class="java">&lt;script&gt;    //定义对象    let user={"name":"imwenwen","age":22}    //传统取值    let name1=user.name;    let age1=user.age;    console.log(name1,age1)    console.log("===========")    //es6    let{name,age}=user    console.log(name,age)&lt;/script&gt;</code></pre><h3 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h3><pre><code class="java">&lt;script&gt;    //对象复制    let person1={name:"imwenwen",age:22}    let someone={...person1}    console.log(someone)    console.log("==============")    //合并对象    let age={age:23}    let name={name:"imwenwen"}    let p2={...name,...age}    console.log(p2)&lt;/script&gt;</code></pre><h3 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h3><pre><code class="java">&lt;script&gt;    const name="imwenwen"    const age=22    //传统    let p1={name:name,age:age}    console.log(p1);    //es6    let p2={name,age}    console.log(p2)&lt;/script&gt;</code></pre><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><pre><code class="java">&lt;script&gt;    //1.es6    `实现换行    let strs=`hello,    es6 demo up`    console.log(strs)    //2. `可以取值   let name="imwenwen"   let age =22;   let strs2=`hello,${name},age is ${age+1}`    console.log(strs2)   //3. `调用方法   function f1(){       return "hello f1"   }   let strs3=`demo,${f1()}`   console.log(strs3)&lt;/script&gt;</code></pre><h3 id="定义方法简写"><a href="#定义方法简写" class="headerlink" title="定义方法简写"></a>定义方法简写</h3><pre><code class="java">&lt;script&gt;    //传统定义的方法    const person1={        sayHi:function(){            console.log("Hi")        },        hello:function(){            console.log("Hello")        }    }    //调用    person1.hello()   person1.sayHi()   //es6   const person2={       sayHi(){           console.log("Hi,es6")       }   }   person2.sayHi()&lt;/script&gt;</code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><pre><code class="java">&lt;script&gt;    //传统    var f1=function(a){        return a+1    }    console.log("f1 "+f1(10))    //es6  f2=参数=&gt;(return) x    var f2=a=&gt;a+5    console.log("f2 "+f2(20))    var f3=function(a,b){        let result=a+b        return result    }    console.log("f3 "+f3(20,10))        var f4=(a,b)=&gt;a+b    console.log("f4 "+f4(22,10))&lt;/script&gt;</code></pre><h2 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h2><h3 id="01Vue入门"><a href="#01Vue入门" class="headerlink" title="01Vue入门"></a>01Vue入门</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="app"&gt; {{msg}}&lt;/div&gt;&lt;script src="vue.min.js"&gt;&lt;/script&gt;&lt;script&gt;    new Vue({        el:'#app',        data:{            msg:"Hello,Vue"        }    })&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="02测试代码片段"><a href="#02测试代码片段" class="headerlink" title="02测试代码片段"></a>02测试代码片段</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="app"&gt;    {{msg}}&lt;/div&gt;&lt;script src="vue.min.js"&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue({  el:'#app',  data:{msg:"代码测试"} }); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="03vue指令v-bind"><a href="#03vue指令v-bind" class="headerlink" title="03vue指令v-bind"></a>03vue指令v-bind</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;!--             v-bind 单向绑定数据 用于标签属性 简写方式':'         --&gt;        &lt;h1 v-bind:title="msg"&gt;            {{content}}        &lt;/h1&gt;        &lt;h1 :title="msg"&gt;            {{content}}        &lt;/h1&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;    &lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {                content: '我是标题',                msg: '页面加载于' + new Date().toLocaleString()            }        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="04v-model"><a href="#04v-model" class="headerlink" title="04v-model"></a>04v-model</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--         v-model 双向绑定     --&gt;    &lt;div id="app"&gt;        &lt;input type="text" v-bind:value="str.key" /&gt;        &lt;input type="text" v-model="str.key" /&gt;        &lt;p&gt;{{str.key}}&lt;/p&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;    &lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {                str: {                    key: 'imwenwen'                }            },            methods: {}        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="05-vue事件操作"><a href="#05-vue事件操作" class="headerlink" title="05 vue事件操作"></a>05 vue事件操作</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;  &lt;meta charset="UTF-8" /&gt;  &lt;meta name="viewport"    content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios" /&gt;  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt;  &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="app"&gt;    &lt;!--      vue绑定事件 v-on 简写  @ 方法可以不加()    --&gt;    &lt;button v-on:click="search()"&gt;查询1&lt;/button&gt;    &lt;button @click="f1"&gt;查询2&lt;/button&gt;  &lt;/div&gt;  &lt;script src="vue.min.js"&gt;&lt;/script&gt;  &lt;script&gt;    var vm = new Vue({      el: "#app",      data: {        str:{          key:'imwenwen'        }      },      methods: {        search(){          console.log("search")        },        f1(){          console.log("f1")        }      },    });  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="06-vue修饰符"><a href="#06-vue修饰符" class="headerlink" title="06 vue修饰符"></a>06 vue修饰符</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;form action="save" v-on:submit.prevent="onSubmit"&gt;            &lt;label for="username"&gt;                &lt;input type="text" id="username" v-model="user.username"&gt;&lt;/input&gt;                &lt;button type="submit"&gt;提交&lt;/button&gt;            &lt;/label&gt;        &lt;/form&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;    &lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {                user: {                }            },            methods: {                onSubmit() {                    if (this.user.username) {                        console.log(this.user.username)                    } else {                        alert("请输入用户名")                    }                }            }        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="07v-if"><a href="#07v-if" class="headerlink" title="07v-if"></a>07v-if</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;!--            v-if v-else 条件指令        --&gt;     &lt;input type="checkbox" v-model="ok"&gt;是否同意&lt;/input&gt;     &lt;h1 v-if="ok"&gt;imwenwen&lt;/h1&gt;     &lt;h1 v-else&gt;ヽ(✿ﾟ▽ﾟ)ノ&lt;/h1&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;    &lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {                ok:true            },            methods: {}        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="08v-for"><a href="#08v-for" class="headerlink" title="08v-for"></a>08v-for</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;ul&gt;            &lt;li v-for="item in 10"&gt;{{item}}&lt;/li&gt;        &lt;/ul&gt;        &lt;ul&gt;            &lt;li v-for="(item,index) in 10"&gt;{{item}}----{{index}}&lt;/li&gt;        &lt;/ul&gt;        &lt;hr /&gt;        &lt;table border="1"&gt;            &lt;tr v-for="item in userList"&gt;                            &lt;td&gt;{{item.id}}&lt;/td&gt;                &lt;td&gt;{{item.name}}&lt;/td&gt;                &lt;td&gt;{{item.age}}&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;    &lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {                userList: [                    {                        id: 1, name: "helen", age: 18                    }, {                        id: 2, name: "maven", age: 19                    }, {                        id: 3, name: "imwenwen", age: 20                    }                ]            }        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="09-vue组件"><a href="#09-vue组件" class="headerlink" title="09 vue组件"></a>09 vue组件</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;&lt;Navbar&gt;&lt;/Navbar&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            components:{                'Navbar':{template: '&lt;ul&gt;&lt;li&gt;学院首页&lt;/li&gt;&lt;li&gt;学院管理&lt;/li&gt;&lt;/ul&gt;'}             }        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="10-vue全局组件"><a href="#10-vue全局组件" class="headerlink" title="10 vue全局组件"></a>10 vue全局组件</h3><pre><code class="js">Vue.component('runoob', {    template: '&lt;h1&gt;自定义组件runoob&lt;/h1&gt;'  })</code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;&lt;runoob&gt;&lt;/runoob&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;&lt;/script&gt;    &lt;script src="components/runoob.js"&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue({            el: '#app',            data: {},            methods: {}        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20210203011833609.png" alt="image-20210203011833609"></p><h3 id="11vue生命周期"><a href="#11vue生命周期" class="headerlink" title="11vue生命周期"></a>11vue生命周期</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;&lt;h1&gt;created,mounted&lt;/h1&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;&lt;/script&gt;    &lt;script&gt;       new Vue({            el: '#app',            data: {},            methods: {},            created() {                debugger                //页面渲染之前执行                console.log("created")            },            mounted() {                debugger                //页面渲染之后执行                console.log("mounted")            }        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="12vue-route"><a href="#12vue-route" class="headerlink" title="12vue route"></a>12vue route</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;h1&gt;Hello,VueRouter&lt;/h1&gt;        &lt;p&gt;            &lt;router-link to="/"&gt;首页&lt;/router-link&gt;            &lt;router-link to="/teacher"&gt;教师管理&lt;/router-link&gt;            &lt;router-link to="/student"&gt;学生管理&lt;/router-link&gt;        &lt;/p&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;&lt;/script&gt;    &lt;script src="vue-router.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        const Welcome = { template: '&lt;div&gt;欢迎&lt;/div&gt;' }        const Teacher = { template: '&lt;div&gt;欢迎Teacher&lt;/div&gt;' }        const Student = { template: '&lt;div&gt;欢迎Student&lt;/div&gt;' }        const routes = [            {                path: '/', redirect: "/welcome"            },             {                path: '/welcome', component: Welcome            },            {                path: '/teacher', component: Teacher            },            {                path: '/student', component: Student            }        ]        const router = new VueRouter({            routes        })        var vm = new Vue({            el: '#app',            router        });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="13环境"><a href="#13环境" class="headerlink" title="13环境"></a>13环境</h3><pre><code class="properties">需要引入 vue.min.js,vue-router.min.js</code></pre><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="app"&gt;        &lt;!--把userList数组里面数据显示 使用v-for指令 --&gt;        &lt;div v-for="user in userList"&gt;            {{user.name}} -- {{user.age}}        &lt;/div&gt;    &lt;/div&gt;    &lt;script src="vue.min.js"&gt;&lt;/script&gt;    &lt;script src="axios.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        new Vue({            el: '#app',            //固定的结构            data: { //在data定义变量和初始值                //定义变量，值空数组                userList:[]            },            created() { //页面渲染之前执行                //调用定义的方法                this.getUserList()            },            methods:{//编写具体的方法                //创建方法 查询所有用户数据                getUserList() {                    //使用axios发送ajax请求                    //axios.提交方式("请求接口路径").then(箭头函数).catch(箭头函数)                    axios.get("data.json")                        .then(response =&gt;{//请求成功执行then方法                            //response就是请求之后返回数据                            //通过response获取具体数据，赋值给定义空数组                            //console.log(response)                            this.userList = response.data.data                            console.log(this.userList)                        })                         .catch(error =&gt;{                        }) //请求失败执行catch方法                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="json">data.json{    "code": 200,    "msg": "成功",    "data": [        {            "id": 1,            "name": "wenwen",            "age": 10        },        {            "id": 2,            "name": "helen",            "age": 20        },        {            "id": 3,            "name": "andy",            "age": 30        }    ]}</code></pre><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><pre><code class="properties">需要引入 axios.min.js ,vue.min.js</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端知识点&quot;&gt;&lt;a href=&quot;#前端知识点&quot; class=&quot;headerlink&quot; title=&quot;前端知识点&quot;&gt;&lt;/a&gt;前端知识点&lt;/h1&gt;&lt;h2 id=&quot;Es6&quot;&gt;&lt;a href=&quot;#Es6&quot; class=&quot;headerlink&quot; title=&quot;Es6&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>随便</title>
    <link href="http://example.com/2021/01/30/%E9%9A%8F%E7%AC%94/"/>
    <id>http://example.com/2021/01/30/%E9%9A%8F%E7%AC%94/</id>
    <published>2021-01-29T16:16:00.000Z</published>
    <updated>2021-02-02T16:59:38.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《忘了没有》"><a href="#《忘了没有》" class="headerlink" title="《忘了没有》"></a>《忘了没有》</h2><pre><code class="properties">忘了没有 - 王靖雯不胖有没有人告诉我不快乐只剩我 独自承受回想过 我牵着你的手不知有多久 已没在停留你到底忘了没有忘了没有忘了没有我和你一起承诺每一个梦每一个失眠夜晚你的晚安变成孤单只能在回忆中 拥抱我你到底忘了没有忘了没有忘了没有你爱我是你亲口的承诺我还在幻想 夜深人静的时候你还是 会想我有没有有没有人还不经意提起我错过的 我没有闪躲我试过 悠悠荡荡寻着找回那所有 珍惜那所有你到底忘了没有忘了没有忘了没有我和你一起承诺每一个梦每一个失眠夜晚你的晚安变成孤单只能在回忆中 拥抱我你到底忘了没有忘了没有忘了没有你爱我是你亲口的承诺我还在幻想 夜深人静的时候你还是 会想我有没有多少次看着你的眼睛多少次想得到你回应我没有勇气 却还想问你你怎么会舍得放弃你到底忘了没有忘了没有忘了没有我和你一起承诺每一个梦每一个失眠夜晚你的晚安变成孤单只能在回忆中 拥抱我你到底忘了没有忘了没有忘了没有你爱我是你亲口的承诺我还在幻想 夜深人静的时候你还是 会想我有没有</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;《忘了没有》&quot;&gt;&lt;a href=&quot;#《忘了没有》&quot; class=&quot;headerlink&quot; title=&quot;《忘了没有》&quot;&gt;&lt;/a&gt;《忘了没有》&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;properties&quot;&gt;忘了没有 - 王靖雯不胖

有没有人告诉我不快乐
只剩</summary>
      
    
    
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习</title>
    <link href="http://example.com/2021/01/30/ngnix/"/>
    <id>http://example.com/2021/01/30/ngnix/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-01-29T16:07:33.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx学习"><a href="#Nginx学习" class="headerlink" title="Nginx学习"></a>Nginx学习</h1><p>我们公司项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy98b25257-71be-48f3-8afe-e1226ebc4589.png" alt="img"><br>但是慢慢的，使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy1d77bc35-df30-46fb-8c41-61ff4468d0c9.png" alt="img"><br>于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy33ee7313-9356-46e6-a0b2-fc1ed8ef9a62.png" alt="img"><br>我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</p><h2 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p><h2 id="Nginx作用？"><a href="#Nginx作用？" class="headerlink" title="Nginx作用？"></a>Nginx作用？</h2><blockquote><p>Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</p></blockquote><p>正向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy46bdad36-d3e0-43b0-a223-43360b7e8fc7.png" alt="img"><br>反向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy62a15097-6e2a-4dbe-bcf5-f0d7cab81089.png" alt="img"></p><blockquote><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。</p></blockquote><p>轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy4d33dfac-1949-4b2d-abb8-fe0b6e65b8dc.png" alt="img"><br>加权轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb1e3e440-4159-4259-a174-528b56cb04b2.png" alt="img"><br>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy64acb9a3-cd1a-4c0e-a1fa-9b220046a95a.png" alt="img"></p><blockquote><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyedb1bbd6-e530-4aba-8fde-68658a10e73f.png" alt="img"></p><p>目前，通过使用Nginx大大提高了我们网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！</p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><strong>1、下载nginx</strong></p><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版本。<br>以nginx/Windows-1.16.1为例，直接下载 nginx-1.16.1.zip。<br>下载后解压，解压后如下：</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb5a1d538-352c-4aa6-88f7-23d18f0588ab.png" alt="img"></p><p><strong>2、启动nginx</strong></p><p>有很多种方法启动nginx</p><p>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过</p><p>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 <code>nginx.exe</code> ，回车即可</p><p><strong>3、检查nginx是否启动成功</strong></p><p>直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudya21688c8-159e-4caa-8e65-3dc056b6b78e.png" alt="img"></p><p><strong>4、配置监听</strong></p><p>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf23105c4-b0b2-4e22-a1bf-b8098f40c144.png" alt="img"></p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 <code>nginx -s reload</code> 即可让改动生效</p><p><strong>5、关闭nginx</strong></p><p>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</p><p>(2)使用taskkill <code>taskkill /f /t /im nginx.exe</code></p><pre><code>taskkill是用来终止进程的，/f是强制终止 ./t终止指定的进程和任何由此启动的子进程。/im示指定的进程名称 .</code></pre><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><p><strong>1、安装gcc</strong></p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><pre><code>yum install gcc-c++</code></pre><p><strong>2、PCRE pcre-devel 安装</strong></p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><pre><code>yum install -y pcre pcre-devel</code></pre><p><strong>3、zlib 安装</strong></p><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><pre><code>yum install -y zlib zlib-devel</code></pre><p><strong>4、OpenSSL 安装</strong><br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><pre><code>yum install -y openssl openssl-devel</code></pre><p><strong>5、下载安装包</strong></p><p>手动下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf51b946d-fda4-4675-b913-2084e028a5c0.png" alt="img"></p><p>下载完毕上传到服务器上 /root</p><p><strong>6、解压</strong></p><pre><code>tar -zxvf nginx-1.18.0.tar.gzcd nginx-1.18.0</code></pre><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd8290598-ede7-4b4b-875b-2f447a9c001f.png" alt="img"></p><p><strong>7、配置</strong></p><p>使用默认配置，在nginx根目录下执行</p><pre><code>./configuremakemake install</code></pre><p>查找安装路径： <code>whereis nginx</code></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf80f8dc2-d5df-4bc2-933d-6ce11f388f6e.png" alt="img"></p><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><pre><code>cd /usr/local/nginx/sbin/./nginx  启动./nginx -s stop  停止./nginx -s quit  安全退出./nginx -s reload  重新加载配置文件ps aux|grep nginx  查看nginx进程</code></pre><p>启动成功访问 服务器ip:80</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd64b251b-817c-436b-b7a0-57da7bb48cd1.png" alt="img"></p><p>注意：如何连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放端口！<br>相关命令：</p><pre><code># 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all# 查询端口是否开放firewall-cmd --query-port=8080/tcp# 开放80端口firewall-cmd --permanent --add-port=80/tcp# 移除端口firewall-cmd --permanent --remove-port=8080/tcp#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload# 参数解释1、firwall-cmd：是Linux提供的操作firewall的一个工具；2、--permanent：表示设置为持久；3、--add-port：标识添加的端口；</code></pre><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><pre><code>upstream lb{   server 127.0.0.1:8080 weight=1;  server 127.0.0.1:8081 weight=1;}location / {  proxy_pass http://lb;}</code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre><code class="xml">########### 每个指令必须有分号结束。##################user administrator administrators;  #配置用户或者组，默认为nobody nobody。#worker_processes 2;  #允许生成的进程数，默认为1#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emergevents {    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport    worker_connections  1024;    #最大连接数，默认为512}http {    include       mime.types;   #文件扩展名与文件类型映射表    default_type  application/octet-stream; #默认文件类型，默认为text/plain    #access_log off; #取消服务日志        log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式    access_log log/access.log myFormat;  #combined为日志格式的默认值    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。    upstream mysvr {         server 127.0.0.1:7878;      server 192.168.10.121:3333 backup;  #热备    }    error_page 404 https://www.baidu.com; #错误页    server {        keepalive_requests 120; #单连接请求上限次数。        listen       4545;   #监听端口        server_name  127.0.0.1;   #监听地址               location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。           #root path;  #根目录           #index vv.txt;  #设置默认页           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表           deny 127.0.0.1;  #拒绝的ip           allow 172.18.5.54; #允许的ip                   }     }}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx学习&quot;&gt;&lt;a href=&quot;#Nginx学习&quot; class=&quot;headerlink&quot; title=&quot;Nginx学习&quot;&gt;&lt;/a&gt;Nginx学习&lt;/h1&gt;&lt;p&gt;我们公司项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了</summary>
      
    
    
    
    <category term="负载均衡" scheme="http://example.com/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
    <category term="Ngnix" scheme="http://example.com/tags/Ngnix/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://example.com/2020/01/28/SpringCloud/"/>
    <id>http://example.com/2020/01/28/SpringCloud/</id>
    <published>2020-01-28T01:25:00.000Z</published>
    <updated>2021-01-29T16:15:40.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>Spring Cloud是一系列框架的<a href="https://baike.baidu.com/item/%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88/994839">有序集合</a>。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="在哪里？"><a href="#在哪里？" class="headerlink" title="在哪里？"></a>在哪里？</h2><p>中文文档：</p><p><a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></p><p>官网：</p><p><a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/</a></p><h2 id="去哪下？"><a href="#去哪下？" class="headerlink" title="去哪下？"></a>去哪下？</h2><h2 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
